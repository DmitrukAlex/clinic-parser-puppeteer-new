require('dotenv').config();
const express = require('express');
const fs = require('fs');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');

puppeteer.use(StealthPlugin());

const app = express();
const PORT = process.env.PORT || 3000;

// ‚úÖ –°–∏–≥–Ω–∞–ª Railway, —â–æ —Å–µ—Ä–≤–µ—Ä "–∂–∏–≤–∏–π"
app.get('/', (_, res) => res.send('‚úÖ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /run –¥–ª—è –∑–∞–ø—É—Å–∫—É'));

// üß† –û—Å–Ω–æ–≤–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑–∞–ø—É—Å–∫—É –ø–∞—Ä—Å–µ—Ä–∞
app.get('/run', async (req, res) => {
  console.log('üöÄ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤...');
  const url = req.query.url || process.env.TARGET_URL;

  if (!url) {
    return res
      .status(400)
      .json({ error: '‚ùå –í–∫–∞–∂—ñ—Ç—å `url` —É –∑–∞–ø–∏—Ç—ñ –∞–±–æ –∑–∞–¥–∞–π—Ç–µ TARGET_URL —É .env' });
  }

  let browser;

  try {
    browser = await puppeteer.launch({
      headless: 'new',
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
      timeout: 60_000,
    });

    const page = await browser.newPage();
    await page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36'
    );

const axios = require('axios');
try {
  const testResponse = await axios.get(url, { timeout: 10000 });
  console.log('üåê –¢–µ—Å—Ç–æ–≤–∏–π HTTP-–∑–∞–ø–∏—Ç –ø—Ä–æ–π—à–æ–≤');
} catch (err) {
  console.warn('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥—ñ—Å—Ç–∞—Ç–∏—Å—å –¥–æ —Å–∞–π—Ç—É —á–µ—Ä–µ–∑ axios:', err.message);
  return res.status(400).json({ error: '–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∑ Railway', details: err.message });
}

   // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
await page.goto(url, { waitUntil: 'networkidle0', timeout: 60_000 });

// –û—á—ñ–∫—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å <body>
await page.waitForSelector('body', { timeout: 10_000 });

// ‚è≥ –ë—É—Ñ–µ—Ä 3 —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
await new Promise(resolve => setTimeout(resolve, 3000));

// üß† –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥—É
const data = await page.evaluate(() => {
      const result = {
        prices: [],
        procedures: [],
        contacts: [],
        socialMedia: [],
        reviewsLinks: [],
        specialists: [],
        values: []
      };

      const regexPrice = /\d[\d\s.,]{2,6}?(–≥—Ä–Ω|‚Ç¥)?/gi;
      const regexPhone = /(?:\+38)?0\d{9}/g;
      const regexEmail = /[\w.-]+@[\w.-]+\.\w+/g;
      const allElements = document.querySelectorAll('body *');

      allElements.forEach(el => {
        const text = el.innerText?.trim() || el.textContent?.trim() || el.innerHTML?.trim();
        const href = el.getAttribute('href') || '';

        if (text) {
          if (regexPrice.test(text)) result.prices.push(...text.match(regexPrice));
          if (text.length < 100 && regexPrice.test(text)) result.procedures.push(text);
          if (regexPhone.test(text)) result.contacts.push(...text.match(regexPhone));
          if (regexEmail.test(text)) result.contacts.push(...text.match(regexEmail));
          if (/–ø–æ—Å–ª—É–≥|–ø—Ä–æ—Ü–µ–¥—É—Ä/i.test(text) && text.length < 250) result.procedures.push(text);
          if (/–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥|–ª—ñ–∫–∞—Ä|–µ–∫—Å–ø–µ—Ä—Ç|—Ç–µ—Ä–∞–ø–µ–≤—Ç|—Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç/i.test(text)) result.specialists.push(text);
          if (/–ø—Ä–æ –Ω–∞—Å|–º—ñ—Å—ñ—è|—á–æ–º—É –º–∏|–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞/i.test(text) && text.length > 80) result.values.push(text);
        }

        if (/instagram\.com|facebook\.com|t\.me|youtube\.com|viber\.com/i.test(href)) {
          result.socialMedia.push(href);
        }
        if (/maps\.google|reviews|–≤—ñ–¥–≥—É–∫/i.test(href)) {
          result.reviewsLinks.push(href);
        }
      });

      const unique = arr => Array.from(new Set(arr.map(item => item.trim())));
      return {
        prices: unique(result.prices),
        procedures: unique(result.procedures),
        contacts: unique(result.contacts),
        socialMedia: unique(result.socialMedia),
        reviewsLinks: unique(result.reviewsLinks),
        specialists: unique(result.specialists),
        values: unique(result.values)
      };
    });

    fs.writeFileSync('result.json', JSON.stringify(data, null, 2));
    console.log('‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    res.status(200).json(data);

  } catch (err) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥—É:', err.message || err);
    res.status(500).json({ error: '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥', details: err.message });
  } finally {
    if (browser) await browser.close();
  }
});

// ‚úÖ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
